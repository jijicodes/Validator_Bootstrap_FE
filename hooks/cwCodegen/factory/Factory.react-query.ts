/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, AcceptedDenom, ExecuteMsg, Timestamp, Uint64, RewardDistributionType, CampaignCreationSettings, QueryMsg, Addr, ArrayOfValidatedAcceptedDenom, ValidatedAcceptedDenom, ArrayOfCampaign, Campaign } from "./Factory.types";
import { FactoryQueryClient, FactoryClient } from "./Factory.client";
export interface FactoryReactQuery<TResponse, TData = TResponse> {
  client: FactoryQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface FactoryGetCampaignsByConnectionQuery<TData> extends FactoryReactQuery<ArrayOfCampaign, TData> {
  args: {
    connectionId: string;
  };
}
export function useFactoryGetCampaignsByConnectionQuery<TData = ArrayOfCampaign>({
  client,
  args,
  options
}: FactoryGetCampaignsByConnectionQuery<TData>) {
  return useQuery<ArrayOfCampaign, Error, TData>(["factoryGetCampaignsByConnection", client?.contractAddress, JSON.stringify(args)], () => client ? client.getCampaignsByConnection({
    connectionId: args.connectionId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface FactoryGetAllCampaignsQuery<TData> extends FactoryReactQuery<ArrayOfCampaign, TData> {}
export function useFactoryGetAllCampaignsQuery<TData = ArrayOfCampaign>({
  client,
  options
}: FactoryGetAllCampaignsQuery<TData>) {
  return useQuery<ArrayOfCampaign, Error, TData>(["factoryGetAllCampaigns", client?.contractAddress], () => client ? client.getAllCampaigns() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface FactoryGetCampaignQuery<TData> extends FactoryReactQuery<Campaign, TData> {
  args: {
    connectionId: string;
    validatorAddr: string;
  };
}
export function useFactoryGetCampaignQuery<TData = Campaign>({
  client,
  args,
  options
}: FactoryGetCampaignQuery<TData>) {
  return useQuery<Campaign, Error, TData>(["factoryGetCampaign", client?.contractAddress, JSON.stringify(args)], () => client ? client.getCampaign({
    connectionId: args.connectionId,
    validatorAddr: args.validatorAddr
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface FactorySetCreationFeeAddressMutation {
  client: FactoryClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFactorySetCreationFeeAddressMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FactorySetCreationFeeAddressMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FactorySetCreationFeeAddressMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setCreationFeeAddress(fee, memo, funds), options);
}
export interface FactoryRemoveAcceptedDenomMutation {
  client: FactoryClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFactoryRemoveAcceptedDenomMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FactoryRemoveAcceptedDenomMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FactoryRemoveAcceptedDenomMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeAcceptedDenom(fee, memo, funds), options);
}
export interface FactoryAddAcceptedDenomMutation {
  client: FactoryClient;
  msg: {
    denom: string;
    minAcceptedFee: Uint128;
    pairContract: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFactoryAddAcceptedDenomMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FactoryAddAcceptedDenomMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FactoryAddAcceptedDenomMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addAcceptedDenom(msg, fee, memo, funds), options);
}
export interface FactorySetCampaignContractCodeIdMutation {
  client: FactoryClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFactorySetCampaignContractCodeIdMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FactorySetCampaignContractCodeIdMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FactorySetCampaignContractCodeIdMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setCampaignContractCodeId(fee, memo, funds), options);
}
export interface FactoryCreateCampaignMutation {
  client: FactoryClient;
  msg: {
    connectionId: string;
    expiration: Timestamp;
    remoteStakingDenom: string;
    rewardDistributionType: RewardDistributionType;
    targetPosition: number;
    validatorAddress: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFactoryCreateCampaignMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FactoryCreateCampaignMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FactoryCreateCampaignMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.createCampaign(msg, fee, memo, funds), options);
}