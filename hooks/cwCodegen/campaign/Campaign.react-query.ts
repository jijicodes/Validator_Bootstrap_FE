/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Timestamp, Uint64, RewardDistributionType, InstantiateMsg, ExecuteMsg, Uint128, PledgeType, UserPledgeType, Pledge, UserPledge, UserRedelegation, QueryMsg, ArrayOfPledge, RewardsToDistributeNowResponse, Coin, Addr, CampaignState, PendingStartState, EndedState, CampaignStatusResponse, CampaignInfo, DistributedRewards } from "./Campaign.types";
import { CampaignQueryClient, CampaignClient } from "./Campaign.client";
export interface CampaignReactQuery<TResponse, TData = TResponse> {
  client: CampaignQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface CampaignExecuteDelegationsMutation {
  client: CampaignClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCampaignExecuteDelegationsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CampaignExecuteDelegationsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CampaignExecuteDelegationsMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.executeDelegations(fee, memo, funds), options);
}
export interface CampaignPledgeMutation {
  client: CampaignClient;
  msg: {
    amount: Uint128;
    pledgeAddress: string;
    pledgeType: PledgeType;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCampaignPledgeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CampaignPledgeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CampaignPledgeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.pledge(msg, fee, memo, funds), options);
}
export interface CampaignActivateCampaignMutation {
  client: CampaignClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCampaignActivateCampaignMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CampaignActivateCampaignMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CampaignActivateCampaignMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.activateCampaign(fee, memo, funds), options);
}