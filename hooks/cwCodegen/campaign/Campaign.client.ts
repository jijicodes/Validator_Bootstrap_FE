/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Timestamp, Uint64, RewardDistributionType, InstantiateMsg, ExecuteMsg, Uint128, PledgeType, UserPledgeType, Pledge, UserPledge, UserRedelegation, QueryMsg, ArrayOfPledge, RewardsToDistributeNowResponse, Coin, Addr, CampaignState, PendingStartState, EndedState, CampaignStatusResponse, CampaignInfo, DistributedRewards } from "./Campaign.types";
export interface CampaignReadOnlyInterface {
  contractAddress: string;
}
export class CampaignQueryClient implements CampaignReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
  }

}
export interface CampaignInterface extends CampaignReadOnlyInterface {
  contractAddress: string;
  sender: string;
  activateCampaign: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  pledge: ({
    amount,
    pledgeAddress,
    pledgeType
  }: {
    amount: Uint128;
    pledgeAddress: string;
    pledgeType: PledgeType;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  executeDelegations: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CampaignClient extends CampaignQueryClient implements CampaignInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.activateCampaign = this.activateCampaign.bind(this);
    this.pledge = this.pledge.bind(this);
    this.executeDelegations = this.executeDelegations.bind(this);
  }

  activateCampaign = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      activate_campaign: {}
    }, fee, memo, _funds);
  };
  pledge = async ({
    amount,
    pledgeAddress,
    pledgeType
  }: {
    amount: Uint128;
    pledgeAddress: string;
    pledgeType: PledgeType;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      pledge: {
        amount,
        pledge_address: pledgeAddress,
        pledge_type: pledgeType
      }
    }, fee, memo, _funds);
  };
  executeDelegations = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      execute_delegations: {}
    }, fee, memo, _funds);
  };
}