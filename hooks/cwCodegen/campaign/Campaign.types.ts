/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export type Timestamp = Uint64;
export type Uint64 = string;
export type RewardDistributionType =
  | {
      Daily: {
        num_of_days: number;
        [k: string]: unknown;
      };
    }
  | {
      Immediate: {
        [k: string]: unknown;
      };
    };
export interface InstantiateMsg {
  admin_address: string;
  connection_id: string;
  expiration: Timestamp;
  factory_contract_addr: string;
  remote_staking_denom: string;
  reward_distribution_type: RewardDistributionType;
  target_position: number;
  validator_address: string;
  [k: string]: unknown;
}
export type ExecuteMsg =
  | ("cancel_campaign" | "expire_campaign")
  | {
      activate_campaign: string[];
    }
  | {
      pledge: Pledge;
    }
  | "cancel_pledge"
  | "disburse_funds"
  | {
      execute_delegations: UserPledge[];
    };
export type Uint128 = string;
export type PledgeType =
  | "Delegation"
  | {
      Redelegation: {
        from_validators: string[];
        [k: string]: unknown;
      };
    };
export type UserPledgeType =
  | {
      Delegation: Uint128;
    }
  | {
      Redelegation: UserRedelegation[];
    };
export interface Pledge {
  amount: Uint128;
  pledge_address: string;
  pledge_type: PledgeType;
  [k: string]: unknown;
}
export interface UserPledge {
  pledge_address: string;
  pledge_type: UserPledgeType;
  [k: string]: unknown;
}
export interface UserRedelegation {
  amount: Uint128;
  from_validator: string;
  [k: string]: unknown;
}
export type QueryMsg = ("AllPledges" | "Status") | "RewardsToDistributeNow";
export type ArrayOfPledge = Pledge[];
export interface RewardsToDistributeNowResponse {
  presser_incentives: Coin[];
  total: Coin[];
  [k: string]: unknown;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export type Addr = string;
export type CampaignState =
  | "Active"
  | "Delegating"
  | {
      PendingStart: PendingStartState;
    }
  | {
      RewardsDistribution: DistributedRewards;
    }
  | {
      Ended: EndedState;
    };
export type PendingStartState =
  | "OpeningIcaChannel"
  | "IcaVerified"
  | {
      QueryingRewardBalances: string[];
    };
export type EndedState = "RewardsCompleted" | "Expired" | "Cancelled";
export interface CampaignStatusResponse {
  campaign_info: CampaignInfo;
  reward_tokens: Coin[];
  state: CampaignState;
  [k: string]: unknown;
}
export interface CampaignInfo {
  connection_id: string;
  expiration: Timestamp;
  factory_contract_addr: Addr;
  remote_staking_denom: string;
  reward_distribution_type: RewardDistributionType;
  target_position: number;
  validator_address: string;
  [k: string]: unknown;
}
export interface DistributedRewards {
  disbursements_remaining: number;
  last_distribution: Timestamp;
  total_distributed: Coin[];
  [k: string]: unknown;
}
