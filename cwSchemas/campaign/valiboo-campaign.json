{
  "contract_name": "valiboo-campaign",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "connection_id",
      "expiration",
      "factory_contract_addr",
      "remote_staking_denom",
      "reward_distribution_type",
      "target_position",
      "validator_address"
    ],
    "properties": {
      "connection_id": {
        "description": "IBC connection id to the remote chain",
        "type": "string"
      },
      "expiration": {
        "$ref": "#/definitions/Timestamp"
      },
      "factory_contract_addr": {
        "description": "Factory/hub contract that any additional relay funds can be returned to",
        "type": "string"
      },
      "remote_staking_denom": {
        "description": "denom name on the target chain",
        "type": "string"
      },
      "reward_distribution_type": {
        "$ref": "#/definitions/RewardDistributionType"
      },
      "target_position": {
        "description": "Validatorset position the campaign is attempting to get the validator to",
        "type": "integer",
        "format": "uint8",
        "minimum": 0.0
      },
      "validator_address": {
        "description": "The target of the campaign",
        "type": "string"
      }
    },
    "definitions": {
      "RewardDistributionType": {
        "oneOf": [
          {
            "description": "Rewards are distributed linearly on a daily basis over the course of the specified number of days. num_of_days should be less than or equal to 92",
            "type": "object",
            "required": [
              "Daily"
            ],
            "properties": {
              "Daily": {
                "type": "object",
                "required": [
                  "num_of_days"
                ],
                "properties": {
                  "num_of_days": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Rewards are immediately disbursed to all pledge makers as soon as the delegations are issued",
            "type": "object",
            "required": [
              "Immediate"
            ],
            "properties": {
              "Immediate": {
                "type": "object"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "string",
        "enum": [
          "cancel_campaign",
          "expire_campaign"
        ]
      },
      {
        "description": "The campaign is `PendingStart` and the pledger reward funds have made it to the ICA address and the validator would like to start the campaign. The list of reward token denoms must be specified here.",
        "type": "object",
        "required": [
          "activate_campaign"
        ],
        "properties": {
          "activate_campaign": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "New pledges can be created/tracked here",
        "type": "object",
        "required": [
          "pledge"
        ],
        "properties": {
          "pledge": {
            "$ref": "#/definitions/Pledge"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get rid of unwanted pledge",
        "type": "object",
        "required": [
          "cancel_pledge"
        ],
        "properties": {
          "cancel_pledge": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Disburse reward funds to pledgers",
        "type": "string",
        "enum": [
          "disburse_funds"
        ]
      },
      {
        "description": "Delegation execution should be called when the campaign terms have been fulfilled and it's time to make the delegations occur",
        "type": "object",
        "required": [
          "execute_delegations"
        ],
        "properties": {
          "execute_delegations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserPledge"
            }
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Pledge": {
        "type": "object",
        "required": [
          "amount",
          "pledge_address",
          "pledge_type"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "pledge_address": {
            "type": "string"
          },
          "pledge_type": {
            "$ref": "#/definitions/PledgeType"
          }
        }
      },
      "PledgeType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Delegation"
            ]
          },
          {
            "type": "object",
            "required": [
              "Redelegation"
            ],
            "properties": {
              "Redelegation": {
                "type": "object",
                "required": [
                  "from_validators"
                ],
                "properties": {
                  "from_validators": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "UserPledge": {
        "type": "object",
        "required": [
          "pledge_address",
          "pledge_type"
        ],
        "properties": {
          "pledge_address": {
            "type": "string"
          },
          "pledge_type": {
            "$ref": "#/definitions/UserPledgeType"
          }
        }
      },
      "UserPledgeType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Delegation"
            ],
            "properties": {
              "Delegation": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Redelegation"
            ],
            "properties": {
              "Redelegation": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UserRedelegation"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "UserRedelegation": {
        "type": "object",
        "required": [
          "amount",
          "from_validator"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "from_validator": {
            "type": "string"
          }
        }
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "AllPledges"
        ],
        "properties": {
          "AllPledges": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "Status"
        ],
        "properties": {
          "Status": {
            "type": "object"
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "all_pledges": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Pledge",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Pledge"
      },
      "definitions": {
        "Pledge": {
          "type": "object",
          "required": [
            "amount",
            "pledge_address",
            "pledge_type"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "pledge_address": {
              "type": "string"
            },
            "pledge_type": {
              "$ref": "#/definitions/PledgeType"
            }
          }
        },
        "PledgeType": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Delegation"
              ]
            },
            {
              "type": "object",
              "required": [
                "Redelegation"
              ],
              "properties": {
                "Redelegation": {
                  "type": "object",
                  "required": [
                    "from_validators"
                  ],
                  "properties": {
                    "from_validators": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "status": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CampaignStatusResponse",
      "type": "object",
      "required": [
        "campaign_info",
        "reward_tokens",
        "state"
      ],
      "properties": {
        "campaign_info": {
          "$ref": "#/definitions/CampaignInfo"
        },
        "reward_tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "state": {
          "$ref": "#/definitions/CampaignState"
        }
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "CampaignInfo": {
          "type": "object",
          "required": [
            "connection_id",
            "expiration",
            "factory_contract_addr",
            "remote_staking_denom",
            "reward_distribution_type",
            "target_position",
            "validator_address"
          ],
          "properties": {
            "connection_id": {
              "type": "string"
            },
            "expiration": {
              "$ref": "#/definitions/Timestamp"
            },
            "factory_contract_addr": {
              "$ref": "#/definitions/Addr"
            },
            "remote_staking_denom": {
              "type": "string"
            },
            "reward_distribution_type": {
              "$ref": "#/definitions/RewardDistributionType"
            },
            "target_position": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "validator_address": {
              "type": "string"
            }
          }
        },
        "CampaignState": {
          "oneOf": [
            {
              "description": "The campaign is created but not yet active. In order to proceed the campaign creator must send the reward funds to the ICA address and call the `ActivateCampaign` method on this contract",
              "type": "object",
              "required": [
                "PendingStart"
              ],
              "properties": {
                "PendingStart": {
                  "$ref": "#/definitions/PendingStartState"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "The campaign is currently accepting pledges to reach the target position",
              "type": "string",
              "enum": [
                "Active"
              ]
            },
            {
              "description": "The campaign was successful and rewards are being disbursed to pledgers",
              "type": "string",
              "enum": [
                "RewardsDistribution"
              ]
            },
            {
              "description": "The campaign has ended and the rewards have been distributed if applicable",
              "type": "object",
              "required": [
                "Ended"
              ],
              "properties": {
                "Ended": {
                  "$ref": "#/definitions/EndedState"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "EndedState": {
          "oneOf": [
            {
              "description": "The campaign was a success and all rewards were distributed",
              "type": "string",
              "enum": [
                "RewardsCompleted"
              ]
            },
            {
              "description": "The campaign was non successfully funded before the expiration date occurred",
              "type": "string",
              "enum": [
                "Expired"
              ]
            },
            {
              "description": "The campaign was ended while in the Pending Start or Active stages.",
              "type": "string",
              "enum": [
                "Cancelled"
              ]
            }
          ]
        },
        "PendingStartState": {
          "oneOf": [
            {
              "description": "On instantiation we're opening the channel",
              "type": "string",
              "enum": [
                "OpeningIcaChannel"
              ]
            },
            {
              "description": "Ica channel is open",
              "type": "string",
              "enum": [
                "IcaVerified"
              ]
            },
            {
              "description": "We're querying the reward balances that the creator said they have sent",
              "type": "string",
              "enum": [
                "QueryingRewardBalances"
              ]
            }
          ]
        },
        "RewardDistributionType": {
          "oneOf": [
            {
              "description": "Rewards are distributed linearly on a daily basis over the course of the specified number of days. num_of_days should be less than or equal to 92",
              "type": "object",
              "required": [
                "Daily"
              ],
              "properties": {
                "Daily": {
                  "type": "object",
                  "required": [
                    "num_of_days"
                  ],
                  "properties": {
                    "num_of_days": {
                      "type": "integer",
                      "format": "uint8",
                      "minimum": 0.0
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Rewards are immediately disbursed to all pledge makers as soon as the delegations are issued",
              "type": "object",
              "required": [
                "Immediate"
              ],
              "properties": {
                "Immediate": {
                  "type": "object"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
