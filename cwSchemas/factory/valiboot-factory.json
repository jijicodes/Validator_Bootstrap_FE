{
  "contract_name": "valiboot-factory",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "accepted_denoms",
      "campaign_contract_code_id",
      "creation_fee_address"
    ],
    "properties": {
      "accepted_denoms": {
        "description": "list of all usd stables we accept to start a campaign and relevant routes",
        "type": "array",
        "items": {
          "$ref": "#/definitions/AcceptedDenom"
        }
      },
      "admin": {
        "type": [
          "string",
          "null"
        ]
      },
      "campaign_contract_code_id": {
        "description": "code id for the campaign contract we'll spawn",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "creation_fee_address": {
        "description": "neutron address that the creation fees should be sent to for ongoing software maintenance",
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AcceptedDenom": {
        "type": "object",
        "required": [
          "denom",
          "min_accepted_fee",
          "pair_contract"
        ],
        "properties": {
          "denom": {
            "type": "string"
          },
          "min_accepted_fee": {
            "$ref": "#/definitions/Uint128"
          },
          "pair_contract": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "create_campaign"
        ],
        "properties": {
          "create_campaign": {
            "$ref": "#/definitions/CampaignCreationSettings"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "update the codeid for the campaign contract Admin only action",
        "type": "object",
        "required": [
          "set_campaign_contract_code_id"
        ],
        "properties": {
          "set_campaign_contract_code_id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Admin only action",
        "type": "object",
        "required": [
          "add_accepted_denom"
        ],
        "properties": {
          "add_accepted_denom": {
            "$ref": "#/definitions/AcceptedDenom"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove the given accepted denom (by denom) Admin only action",
        "type": "object",
        "required": [
          "remove_accepted_denom"
        ],
        "properties": {
          "remove_accepted_denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Admin only action",
        "type": "object",
        "required": [
          "set_creation_fee_address"
        ],
        "properties": {
          "set_creation_fee_address": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AcceptedDenom": {
        "type": "object",
        "required": [
          "denom",
          "min_accepted_fee",
          "pair_contract"
        ],
        "properties": {
          "denom": {
            "type": "string"
          },
          "min_accepted_fee": {
            "$ref": "#/definitions/Uint128"
          },
          "pair_contract": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CampaignCreationSettings": {
        "type": "object",
        "required": [
          "connection_id",
          "expiration",
          "remote_staking_denom",
          "reward_distribution_type",
          "target_position",
          "validator_address"
        ],
        "properties": {
          "connection_id": {
            "description": "IBC connection id to the remote chain",
            "type": "string"
          },
          "expiration": {
            "$ref": "#/definitions/Timestamp"
          },
          "remote_staking_denom": {
            "description": "denom name on the target chain",
            "type": "string"
          },
          "reward_distribution_type": {
            "$ref": "#/definitions/RewardDistributionType"
          },
          "target_position": {
            "description": "Validatorset position the campaign is attempting to get the validator to",
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "validator_address": {
            "description": "The target of the campaign",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RewardDistributionType": {
        "oneOf": [
          {
            "description": "Rewards are distributed linearly on a daily basis over the course of the specified number of days. num_of_days should be less than or equal to 92",
            "type": "object",
            "required": [
              "Daily"
            ],
            "properties": {
              "Daily": {
                "type": "object",
                "required": [
                  "num_of_days"
                ],
                "properties": {
                  "num_of_days": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Rewards are immediately disbursed to all pledge makers as soon as the delegations are issued",
            "type": "object",
            "required": [
              "Immediate"
            ],
            "properties": {
              "Immediate": {
                "type": "object"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "string",
        "enum": [
          "get_campaign_contract_code_id",
          "get_accepted_denoms",
          "get_creation_fee_address"
        ]
      },
      {
        "type": "object",
        "required": [
          "get_campaign"
        ],
        "properties": {
          "get_campaign": {
            "type": "object",
            "required": [
              "connection_id",
              "validator_addr"
            ],
            "properties": {
              "connection_id": {
                "type": "string"
              },
              "validator_addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_all_campaigns"
        ],
        "properties": {
          "get_all_campaigns": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_campaigns_by_connection"
        ],
        "properties": {
          "get_campaigns_by_connection": {
            "type": "object",
            "required": [
              "connection_id"
            ],
            "properties": {
              "connection_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_accepted_denoms": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_ValidatedAcceptedDenom",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ValidatedAcceptedDenom"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "ValidatedAcceptedDenom": {
          "type": "object",
          "required": [
            "denom",
            "min_accepted_fee",
            "pair_contract"
          ],
          "properties": {
            "denom": {
              "type": "string"
            },
            "min_accepted_fee": {
              "$ref": "#/definitions/Uint128"
            },
            "pair_contract": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_all_campaigns": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Campaign",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Campaign"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Campaign": {
          "type": "object",
          "required": [
            "campaign_addr",
            "connection_id",
            "target_position"
          ],
          "properties": {
            "campaign_addr": {
              "$ref": "#/definitions/Addr"
            },
            "connection_id": {
              "type": "string"
            },
            "target_position": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_campaign": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Campaign",
      "type": "object",
      "required": [
        "campaign_addr",
        "connection_id",
        "target_position"
      ],
      "properties": {
        "campaign_addr": {
          "$ref": "#/definitions/Addr"
        },
        "connection_id": {
          "type": "string"
        },
        "target_position": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "get_campaign_contract_code_id": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "uint64",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "get_campaigns_by_connection": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Campaign",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Campaign"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Campaign": {
          "type": "object",
          "required": [
            "campaign_addr",
            "connection_id",
            "target_position"
          ],
          "properties": {
            "campaign_addr": {
              "$ref": "#/definitions/Addr"
            },
            "connection_id": {
              "type": "string"
            },
            "target_position": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_creation_fee_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    }
  }
}
